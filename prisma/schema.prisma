generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("PRISMA_DATABASE_URL")
}

enum Role {
  OWNER
  EDITOR
  VIEWER
}

model Board {
  id      String @id @default(uuid())
  title   String
  version Int    @default(1)

  users      BoardUser[]
  categories Category[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BoardUser {
  id   String @id @default(uuid())
  role Role   @default(VIEWER)

  userId  String
  boardId String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  board   Board  @relation(fields: [boardId], references: [id], onDelete: Cascade)

  @@unique([userId, boardId])
}

model Category {
  id       String @id @default(uuid())
  title    String
  position Float
  version  Int    @default(1)

  boardId String
  board   Board  @relation(fields: [boardId], references: [id], onDelete: Cascade)
  tasks   Task[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Task {
  id       String  @id @default(uuid())
  title    String
  details  String?
  position Float
  version  Int     @default(1)

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id            String    @id @default(uuid())
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]

  boardUsers BoardUser[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
